"""Chain detailed info"""
type ChainDetailed {
  id: Int!
  absoluteChainId: String!
  abbr: String!
  name: String!
  type: String!
}

"""Chain"""
type Chain {
  id: Int!
  abbr: String!
  name: String!
}

"""Asset Category"""
type AssetCategory {
  name: String!
  code: String!
}

"""Asset Underlying"""
type AssetUnderlying {
  id: Int
  address: String!
  chainId: Int!
  name: String
  displayName: String
  symbol: String
  icon: String
  decimals: Int!
  categories: [AssetCategory!]!
  chain: Chain!
  price: Float
  underlying: [AssetUnderlying!]!
  reserve: String
}

type Asset {
  id: Int
  address: String!
  chainId: Int!
  name: String
  displayName: String
  symbol: String
  icon: String
  decimals: Int!
  categories: [AssetCategory!]!
  chain: Chain!
  price: Float
  underlying: [AssetUnderlying!]!
}

"""Asset Balance"""
type AssetBalance {
  asset: Asset!

  """Asset balance"""
  balance: Float!

  """Asset price in USD"""
  price: Float
  total: Float!
}

"""Asset Balance Response"""
type AssetBalancesResponse {
  total: Float!
  assets: [AssetBalance!]!
}

"""Asset Price"""
type AssetPrice {
  id: Int!
  address: String!
  chainId: Int!

  """Price in USD"""
  price: Float
}

"""Chain detailed info"""
type Credits {
  """Cost for the current call"""
  cost: Int!

  """Remaining number of credits"""
  remaining: Int!

  """
  Time at which the current limit resets, a signed integer which represents date and time as number of milliseconds from start of UNIX epoch
  """
  resetAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Protocol balance token info"""
type ProtocolBalanceToken {
  id: Int
  address: String!
  chainId: Int!
  name: String
  displayName: String
  symbol: String
  icon: String
  decimals: Int!
  price: Float

  """Token position balance"""
  balance: Float

  """Position value in USD"""
  value: Float

  """Token amount"""
  amount: Float
  underlying: [ProtocolBalanceToken!]!
}

"""Protocol balance position entry"""
type ProtocolBalancePositionEntry {
  """Year APR"""
  apr: Float

  """Token amount"""
  amount: Float

  """Position value in USD"""
  value: Float
  tvl: Float
  token: ProtocolBalanceToken!
}

"""Protocol balance position on chain"""
type ProtocolBalancePosition {
  id: String!
  feature: ProtocolFeatureEnum!
  borrowed: [ProtocolBalancePositionEntry!]
  supplied: [ProtocolBalancePositionEntry!]
  rewarded: [ProtocolBalancePositionEntry!]
}

enum ProtocolFeatureEnum {
  pools
  staking
  claimable
  lending
  delegation
  lockedBalances
  leverageFarming
  insurance
}

"""Protocol balance on chain"""
type ProtocolBalanceChain {
  chain: Chain!
  featureList: [ProtocolFeatureEnum!]!
  total: Float!
  positions: [ProtocolBalancePosition!]!
}

"""Protocol feature"""
type ProtocolFeature {
  list: [ProtocolFeatureEnum!]!
  chain: Chain!
}

"""Protocol"""
type Protocol {
  name: String!
  slug: String!
  features: [ProtocolFeature!]!
}

"""Protocol balance"""
type ProtocolBalance {
  protocol: Protocol!
  address: String!
  total: Float!
  chains: [ProtocolBalanceChain!]!
}

"""Farm model"""
type Farm {
  id: Int!
  url: String!
  slug: String!
  logo: String
  categories: [String!]!
}

"""Token model"""
type Token {
  address: String!
  displayName: String!
  icon: String
  symbol: String!
  name: String!
  tokens: [Token!]
}

"""Tokens separated by category"""
type TokenCategorization {
  borrowRewards: [Token!]
  deposits: [Token!]!
  rewards: [Token!]!
}

"""Opportunities model"""
type Opportunities {
  id: Int!
  chainId: Int!
  apr: Float!
  totalValueLocked: Float!
  categories: [String!]!
  investmentUrl: String
  isNew: Boolean!
  status: OpportunityStatus!
  farm: Farm!
  tokens: TokenCategorization!
}

enum OpportunityStatus {
  VALID
  UNTRUSTED
  DISABLED
}

"""Rekt token info"""
type RektToken {
  name: String
  addresses: [String!]!
}

"""Rekt info model"""
type Rekt {
  id: Int!
  projectName: String!

  """Incident description with HTML tags"""
  description: String

  """Date in: YYYY-mm-dd"""
  date: String
  fundsLost: String
  fundsReturned: String
  chaindIds: [Int!]!
  category: String
  issueType: String
  token: RektToken!
}

"""Shield issue"""
type ShieldIssue {
  id: Int
  registryId: String
  impact: String
  title: String
  description: String
  category: String
  data: String
}

"""Shield tag"""
type ShieldTag {
  contract: String
}

"""Shield token"""
type ShieldToken {
  name: String
  symbol: String
  decimals: Int!
}

"""Shield version"""
type ShieldVersion {
  scanner: String
  scanned: String
}

"""Shield info"""
type Shield {
  id: Int!
  address: String
  network: Int
  name: String
  logo: String
  inProgress: Boolean
  whitelisted: Boolean
  version: ShieldVersion
  tags: ShieldTag
  token: ShieldToken
  issues: [ShieldIssue!]
}

type Query {
  chains: [ChainDetailed!]!
  assetBalances(chainId: Int!, walletAddress: String!): AssetBalancesResponse!
  assetsPrices(assets: [AssetRequest!]!): [AssetPrice!]!
  assets(first: Int = 50, skip: Int = 0, where: AssetFilterInput, orderBy: OrderByFields, orderDirection: OrderDirection): [Asset!]!
  assetsCached(first: Int = 50, skip: Int = 0, where: AssetFilterInput, orderBy: OrderByFields, orderDirection: OrderDirection): [Asset!]!
  credits: Credits!
  protocolBalance(balances: [ProtocolBalanceRequest!]!): [ProtocolBalance!]!
  protocols(name: String, slug: String, chainIds: [Int!], features: [ProtocolFeatureEnum!]): [Protocol!]!
  opportunities(first: Int = 50, skip: Int = 0, where: OpportunitiesFilter, orderBy: OpportunitySortField = TVL, orderDirection: OrderDirection = desc): [Opportunities!]!
  opportunityFarms: [Farm!]!
  rekts(
    pageNumber: Int = 1

    """Number of records per page"""
    pageSize: Int = 50

    """Search by project name, token name, token address"""
    searchText: String
    chainIds: [Int!]
    orderBy: GetRektsOrder
  ): [Rekt!]!
  shields(addresses: [String!]!, chainId: Int!): [Shield!]!
}

input AssetRequest {
  chainId: Int!
  address: String!
}

input AssetFilterInput {
  chainId: Int
  addresses: [String!]
  symbols: [String!]
}

enum OrderByFields {
  symbol
  address
  name
  chainId
  decimals
}

enum OrderDirection {
  asc
  desc
}

input ProtocolBalanceRequest {
  chainIds: [Int!]!
  walletAddress: String!
  protocolName: String!
}

input OpportunitiesFilter {
  """Search by text"""
  searchCriteria: String
  farmIds: [Int!] = []
  opportunityType: [OpportunityType!] = []
  farmCategories: [FarmCategories!] = []
  minTVL: Float
  maxTVL: Float
  minAPR: Float
  maxAPR: Float
  chainIds: [Float!] = []
  statuses: [OpportunityStatus!]
}

enum OpportunityType {
  POOL
  STABLE_POOL
  STABLECOIN
  SINGLE_STAKE
  NO_IL
  LENDING
}

enum FarmCategories {
  Dex
  Yield
  Lending
  Cdp
  YieldAggregator
  CrossChain
  LiquidStaking
  PosStaking
  Derivatives
  AlgoStable
  Insurance
  Synthetics
  Gaming
  Governance
  NftMarketplace
  NftLending
  Other
}

enum OpportunitySortField {
  APR
  TVL
  FARM_NAME
  IS_ENABLED
}

input GetRektsOrder {
  project: Sort
  ticker: Sort
  fundsLost: Sort
  chain: Sort
  issue: Sort
  date: Sort
  category: Sort
}

enum Sort {
  asc
  desc
}