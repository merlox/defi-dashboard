const {
  linkTypeMap,
  createClient: createClientOriginal,
  generateGraphqlOperation,
  assertSameVersion,
} = require('@gqlts/runtime')
var typeMap = linkTypeMap(require('./types.cjs'))

var version = '3.2.10'
assertSameVersion(version)

module.exports.version = version

module.exports.createClient = function (options) {
  options = options || {}
  var optionsCopy = {
    url: undefined,
    queryRoot: typeMap.Query,
    mutationRoot: typeMap.Mutation,
    subscriptionRoot: typeMap.Subscription,
  }
  for (var name in options) {
    optionsCopy[name] = options[name]
  }
  return createClientOriginal(optionsCopy)
}

module.exports.enumProtocolFeatureEnum = {
  pools: 'pools',
  staking: 'staking',
  claimable: 'claimable',
  lending: 'lending',
  delegation: 'delegation',
  lockedBalances: 'lockedBalances',
  leverageFarming: 'leverageFarming',
  insurance: 'insurance',
}

module.exports.enumOpportunityStatus = {
  VALID: 'VALID',
  UNTRUSTED: 'UNTRUSTED',
  DISABLED: 'DISABLED',
}

module.exports.enumOrderByFields = {
  symbol: 'symbol',
  address: 'address',
  name: 'name',
  chainId: 'chainId',
  decimals: 'decimals',
}

module.exports.enumOrderDirection = {
  asc: 'asc',
  desc: 'desc',
}

module.exports.enumOpportunityType = {
  POOL: 'POOL',
  STABLE_POOL: 'STABLE_POOL',
  STABLECOIN: 'STABLECOIN',
  SINGLE_STAKE: 'SINGLE_STAKE',
  NO_IL: 'NO_IL',
  LENDING: 'LENDING',
}

module.exports.enumFarmCategories = {
  Dex: 'Dex',
  Yield: 'Yield',
  Lending: 'Lending',
  Cdp: 'Cdp',
  YieldAggregator: 'YieldAggregator',
  CrossChain: 'CrossChain',
  LiquidStaking: 'LiquidStaking',
  PosStaking: 'PosStaking',
  Derivatives: 'Derivatives',
  AlgoStable: 'AlgoStable',
  Insurance: 'Insurance',
  Synthetics: 'Synthetics',
  Gaming: 'Gaming',
  Governance: 'Governance',
  NftMarketplace: 'NftMarketplace',
  NftLending: 'NftLending',
  Other: 'Other',
}

module.exports.enumOpportunitySortField = {
  APR: 'APR',
  TVL: 'TVL',
  FARM_NAME: 'FARM_NAME',
  IS_ENABLED: 'IS_ENABLED',
}

module.exports.enumSort = {
  asc: 'asc',
  desc: 'desc',
}

module.exports.generateQueryOp = function (fields) {
  return generateGraphqlOperation('query', typeMap.Query, fields)
}
module.exports.generateMutationOp = function (fields) {
  return generateGraphqlOperation('mutation', typeMap.Mutation, fields)
}
module.exports.generateSubscriptionOp = function (fields) {
  return generateGraphqlOperation('subscription', typeMap.Subscription, fields)
}
module.exports.everything = {
  __scalar: true,
}

var schemaExports = require('./guards.cjs')
for (var k in schemaExports) {
  module.exports[k] = schemaExports[k]
}
